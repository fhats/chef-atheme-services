<% if !@config['ircd_protocol_module'].empty? %>
loadmodule "modules/protocol/<%= @config['ircd_protocol_module'] %>";
<% end %>

<% @config['additional_protocol_modules'].each do |mod| %>
loadmodule "modules/protocol/<%= mod %>";<% end %>

loadmodule "modules/backend/<%= @config['database_format'] %>";

loadmodule "modules/crypto/<%= @config['crypto'] %>";
<% @config['additional_crypto'].each do |mod| %>
loadmodule "modules/protocol/<%= mod %>";<% end %>

<% if !@config['authentication'].empty? %>
loadmodule "modules/protocol/<%= @config['authentication'] %>";
<% end %>

<% if @config['nickserv']['enable'] %>
include "etc/nickserv.conf"
<% end %>

<% if @config['chanfix']['enable'] %>
loadmodule "modules/chanfix/main";
<% end %>

<% if @config['operserv']['enable'] %>
include "etc/operserv.conf"
<% end %>


<% if @config['memoserv']['enable'] %>
include "etc/memoserv.conf"
<% end %>


<% if @config['global']['enable'] %>
loadmodule "modules/global/main";
<% end %>

<% if @config['infoserv']['enable'] %>
loadmodule "modules/infoserv/main";
<% end %>

<% if @config['gameserv']['enable'] %>
include "etc/gameserv.conf"
<% end %>

<% if @config['rpgserv']['enable'] %>
include "etc/rpgserv.conf"
<% end %>

<% if @config['botserv']['enable'] %>
include "etc/botserv.conf"
<% end %>

<% if @config['hostserv']['enable'] %>
include "etc/hostserv.conf"
<% end %>

<% if @config['helpserv']['enable'] %>
include "etc/helpserv.conf"
<% end %>

<% if @config['alis']['enable'] %>
loadmodule "modules/alis/main";
<% end %>

<% if @config['statserv']['enable'] %>
include "etc/statserv.conf"
<% end %>

<% if @config['groupserv']['enable'] %>
include "etc/groupserv.conf"
<% end %>

<% if @config['httpd']['enable'] %>
loadmodule "modules/misc/httpd";
<% end %>

<% if @config['xmlrpc']['enable'] %>
loadmodule "modules/misc/xmlrpc";
<% end %>

<% if @config['exttarget']['enable'] %>
include "etc/exttarget.conf"
<% end %>

<% @config['contrib_modules'].each do |mod| %>
loadmodule "modules/contrib/<%= mod %>";<% end %>


/******************************************************************************
 * SERVICES RUNTIME CONFIGURATION SECTION.                                    *
 ******************************************************************************/

/* The serverinfo{} block defines how we appear on the IRC network. */
serverinfo {
	name = "<%= @config['serverinfo']['name'] %>";
	desc = "<%= @config['serverinfo']['desc'] %>";
	numeric = "<%= @config['serverinfo']['numeric'] %>";
	recontime = <%= @config['serverinfo']['recontime'] %>;
	netname = "<%= @config['serverinfo']['netname'] %>";
	hidehostsuffix = "<%= @config['serverinfo']['hidehostsuffix'] %>";
	adminname = "<%= @config['serverinfo']['adminname'] %>";
	adminemail = "<%= @config['serverinfo']['adminemail'] %>";
	<%= optional_directive("registeremail", @config['serverinfo'], "registeremail") %>
	<%= optional_boolean_directive("hidden", @config['serverinfo'], "hidden") %>
	<%= optional_directive("mta", @config['serverinfo'], "mta") %>
	loglevel = {<% @config['serverinfo']['loglevel'].each do |lvl| %>
		<%= lvl %>;<% end %>
	};
	maxlogins = <%= @config['serverinfo']['maxlogins'] %>;
	maxusers = <%= @config['serverinfo']['maxusers'] %>;
	mdlimit = <%= @config['serverinfo']['mdlimit'] %>;
	emaillimit = <%= @config['serverinfo']['emaillimit'] %>;
	emailtime = <%= @config['serverinfo']['emailtime'] %>;
	auth = <%= @config['serverinfo']['auth'] %>;
	casemapping = <%= @config['serverinfo']['casemapping'] %>;
};

<% @config['uplinks'].each do |uplink, cfg| %>
uplink "<%= uplink %>" {
	host = "<%= cfg['host'] %>";
	port = "<%= cfg['port'] %>";
	receive_password = "<%= cfg['receive_password'] %>";
	send_password = "<%= cfg['send_password'] %>";
	vhost = "<%= cfg['vhost'] %>";
};<% end %>

/* Services configuration.
 *
 * Each of these blocks can contain a nick, user, host, real and aliases.
 * Several of them also have options specific to the service.
 */


/* ChanServ configuration.
 *
 * The chanserv {} block contains settings specific to the ChanServ modules.
 *
 * ChanServ provides channel registration services, which allows users to own
 * channels. It is not required, but is strongly recommended.
 */
chanserv {
	/* (*)nick
	 * The nickname we want the client to have.
	 */
	nick = "ChanServ";

	/* (*)user
	 * The username we want the client to have.
	 */
	user = "ChanServ";

	/* (*)host
	 * The hostname we want the client to have.
	 */
	host = "services.int";

	/* (*)real
	 * The GECOS of the client.
	 */
	real = "Channel Services";

	/* (*)aliases
	 * Command aliases for ChanServ.
	 */
	aliases {
	};

	/* (*)access
	 * Command access changes for ChanServ.
	 */
	access {
	};

	/* (*)maxchans
	 * What are the maximum channels that one username can register?
	 */
	maxchans = 5;

	/* fantasy
	 * Do you want to enable fantasy commands? This can
	 * use a lot of CPU up, and will only work if you have
	 * join_chans (in general) enabled as well.
	 */
	fantasy;

	/* (*) hide_xop
	 * Hide the XOP templates from sight.  This is useful if you
	 * want to use templates and not have the XOP templates displayed.
	 */
	#hide_xop;

	/* (*) templates
	 * Defines what flags the global templates comprise.
	 *
	 * For the special XOP templates:
	 * These should all be different and not equal to the empty set,
	 * except that hop may be equal to vop to disable hop.
	 * Each subsequent level should have more flags (except +VHO).
	 * For optimal functioning of /cs forcexop, aop should not have
	 * any of +sRf, hop should not have any of +sRfoOr and vop should
	 * not have any of +sRfoOrhHt.
	 * If this is not specified, the values of Atheme 0.3 are used,
	 * which are generally less intuitive than these.
	 * Note: changing these leaves the flags of existing channel access
	 * entries unchanged, thus removing them of the view of /cs xop list.
	 * Usually the channel founder can use /cs forcexop to update the
	 * entries to the new levels.
	 *
	 * Advice:
	 * If you want to add a co-founder role, remove the flags permission
	 * from the SOP role, and define a co-founder role with flags
	 * permissions.
	 */
	templates {
		vop = "+AV";
		hop = "+AHhitrv";
		aop = "+AOhiortv";
		sop = "+AOafhiorstv";

		founder = "+AFORafhiorstv";

		/* some examples (which are commented out...) */
		#member = "+Ai";
		#op = "+AOiortv";
	};

	/* (*) deftemplates
	 * Defines default templates to set on new channels, as a
	 * space-separated list of name=+flags pairs.
	 * Note: at this time no syntax checking is done on this; it
	 * is your own responsibility to make sure it is correct.
	 */
	#deftemplates = "MEMBER=+Ai OP=+AOiortv";

	/* (*) changets
	 * Change the channel TS to the registration time when someone
	 * recreates a registered channel, ensuring that they are deopped
	 * and all their modes are undone. Note that this involves ChanServ
	 * joining. When the channel was not recreated no deops will be done
	 * (apart from the SECURE option).
	 * This also solves the "join-mode" problem where someone recreates
	 * a registered channel and then sets some modes before they are
	 * deopped.
	 * This is currently supported for charybdis, hybrid, ratbox,
	 * bahamut and inspircd 1.1+. For charybdis, hybrid and ratbox
	 * it only fully works with TS6, with TS5 bans and last-moment modes
	 * will still apply.
	 * (That can also be used to advantage, when first enabling this.)
	 */
	#changets;

	/* (*) trigger
	 * This setting allows you to change the trigger prefix for
	 * ChanServ's in-channel command feature (disableable via chanserv::fantasy).
	 * If no setting is provided, the default is used, which is "!".
	 *
	 * Other settings you could consider trying: ".", "~", "?", "`", "'".
	 */
	trigger = "!";

	/* (*)expire
	 * The number of days before inactive registrations are expired.
	 */
	expire = 30;

	/* (*)maxchanacs
	 * The maximum number of entries allowed in a channel's access list
	 * (both channel ops and akicks), 0 for unlimited.
	 */
	maxchanacs = 0;

	/* (*)maxfounders
	 * The maximum number of founders allowed in a channel.
	 * Note that all founders have the exact same privileges and
	 * the list of founders is shown in various places.
	 */
	maxfounders = 4;

	/* (*)founder_flags
	 * The flags a user will get when they register a new channel.
	 * This MUST include at least 'F' or it will be ignored.
	 * If it is not set, Atheme will give the user all channel flags.
	 */
	#founder_flags = "AFORfiorstv";

	/* (*)akick_time
	 * The default expiration time (in minutes) for AKICKs.
	 * Comment this option out or set to zero for permanent AKICKs
	 * by default (the old behaviour).
	 */
	#akick_time = 10;

	/* (*)antiflood_enforce_method
	 * The enforcement method to use for flood protection by default.
	 * This may be overridden by channel staff.
	 * Available options are: quiet, kickban and akill.
	 */
	antiflood_enforce_method = quiet;
};

/* CHANFIX configuration.
 *
 * The chanfix {} block contains settings specific to the CHANFIX modules.
 *
 * CHANFIX provides channel recovery services without registration, which
 * allows users to maintain control of channels even if ChanServ is not used
 * to register them.
 */
chanfix {
	/* (*)nick
	 * The nickname we want the client to have.
	 */
	nick = "ChanFix";

	/* (*)user
	 * The username we want the client to have.
	 */
	user = "ChanFix";

	/* (*)host
	 * The hostname we want the client to have.
	 */
	host = "services.int";

	/* (*)real
	 * The GECOS of the client.
	 */
	real = "Channel Fixing Service";

	/* (*)autofix
	 * Automatically fix channels if they become opless and meet fixing
	 * criteria.
	 */
	autofix;
};

/* Global noticing configuration.
 *
 * The global {} block contains settings specific to the Global notice module.
 *
 * The Global notice module provides the ability to mass-notify a network.
 */
global {
	/* (*)nick
	 * Sets the nick used for sending out a global notice.
	 */
	nick = "Global";

	/* (*)user
	 * Sets the username used for this client.
	 */
	user = "Global";

	/* (*)host
	 * The hostname used for this client.
	 */
	host = "services.int";

	/* (*)real
	 * The GECOS (real name) of the client.
	 */
	real = "Network Announcements";
};

/* InfoServ configuration
 *
 * The infoserv {} block contains settings specific to the InfoServ module.
 *
 * The InfoServ modules provides the ability to mass-notify a network and send
 * news to users when they connect to the network.
 */
infoserv {
	/* (*)nick
	 * Sets the nick used for InfoServ and sending out informational messages.
	 */
	nick = "InfoServ";

	/* (*)user
	 * Sets the username used for this client.
	 */
	user = "InfoServ";

	/* (*)host
	 * The hostname used for this client,
	 */
	host = "services.int";

	/* (*)real
	 * The GECOS (real name) of the client.
	 */
	real = "Information Service";

	/* (*)logoninfo_count
	 * The number of InfoServ messages a user will see upon connect.
	 * If there are more than this number, the user will be able to
	 * see the rest with /msg infoserv list .
	 */
	logoninfo_count = 3;
};

/* OperServ configuration.
 *
 * The operserv {} block contains settings specific to the OperServ modules.
 *
 * OperServ provides essential network management tools for IRC operators
 * on the IRC network.
 */
operserv {
	/* (*)nick
	 * The nickname we want the Operator Service to have.
	 */
	nick = "OperServ";

	/* (*)user
	 * Sets the username used for this client.
	 */
	user = "OperServ";

	/* (*)host
	 * The hostname used for this client.
	 */
	host = "services.int";

	/* (*)real
	 * The GECOS (real name) of the client.
	 */
	real = "Operator Services";

	/* (*)aliases
	 * Command aliases for OperServ.
	 */
	aliases {
	};

	/* (*)access
	 * Command access changes for OperServ.
	 */
	access {
	};
};

/* SaslServ configuration.
 *
 * The saslserv {} block contains settings specific to the SaslServ modules.
 *
 * SaslServ provides an authentication agent which is compatible with the
 * SASL over IRC (SASL/IRC) protocol extension.
 */
saslserv {
	/* (*)nick
	 * The nickname we want SaslServ to have.
	 */
	nick = "SaslServ";

	/* (*)user
	 * The username we want SaslServ to have.
	 */
	user = "SaslServ";

	/* (*)host
	 * The hostname we want SaslServ to have.
	 */
	host = "services.int";

	/* (*)real
	 * The realname (gecos) information we want SaslServ to have.
	 */
	real = "SASL Authentication Agent";
};

/* MemoServ configuration.
 *
 * The memoserv {} block contains settings specific to the MemoServ modules.
 *
 * MemoServ provides a note-taking service that you can use to send notes
 * to offline users (provided they are registered with Services).
 */
memoserv {
	/* (*)nick
	 * The nickname we want MemoServ to have.
	 */
	nick = "MemoServ";

	/* (*)user
	 * The username we want MemoServ to have.
	 */
	user = "MemoServ";

	/* (*)host
	 * The hostname we want MemoServ to have.
	 */
	host = "services.int";

	/* (*)real
	 * The realname (gecos) information we want MemoServ to have.
	 */
	real = "Memo Services";

	/* (*)aliases
	 * Command aliases for MemoServ.
	 */
	aliases {
	};

	/* (*)access
	 * Command access changes for MemoServ.
	 */
	access {
	};

	/* (*)maxmemos
	 * What is the maximum amount of memos a user can have in their inbox?
	 */
	maxmemos = 30;
};

/* GameServ configuration.
 *
 * The gameserv {} block contains settings specific to the GameServ modules.
 *
 * GameServ provides various in-channel commands for games.
 */
gameserv {
	/* (*)nick
	 * The nickname we want GameServ to have.
	 */
	nick = "GameServ";

	/* (*)user
	 * Sets the username used for this client.
	 */
	user = "GameServ";

	/* (*)host
	 * The hostname used for this client.
	 */
	host = "services.int";

	/* (*)real
	 * The GECOS (real name) of the client.
	 */
	real = "Game Services";

	/* (*)aliases
	 * Command aliases for GameServ.
	 */
	aliases {
	};

	/* (*)access
	 * Command access changes for GameServ.
	 */
	access {
	};
};

/* RPGServ configuration.
 *
 * The rpgserv {} block contains settings specific to the RPGServ modules.
 *
 * RPGServ provides a facility for finding roleplaying channels.
 */
rpgserv {
	/* (*)nick
	 * The nickname we want RPGServ to have.
	 */
	nick = "RPGServ";

	/* (*)user
	 * Sets the username used for this client.
	 */
	user = "RPGServ";

	/* (*)host
	 * The hostname used for this client.
	 */
	host = "services.int";

	/* (*)real
	 * The GECOS (real name) of the client.
	 */
	real = "RPG Finding Services";

	/* (*)aliases
	 * Command aliases for RPGServ.
	 */
	aliases {
	};

	/* (*)access
	 * Command access changes for RPGServ.
	 */
	access {
	};
};

/* BotServ configuration.
 *
 * The botserv {} block contains settings specific to the BotServ modules.
 *
 * BotServ provides virtual channel bots.
 */
botserv {
	/* (*)nick
	 * The nickname we want BotServ to have.
	 */
	nick = "BotServ";

	/* (*)user
	 * Sets the username used for this client.
	 */
	user = "BotServ";

	/* (*)host
	 * The hostname used for this client.
	 */
	host = "services.int";

	/* (*)real
	 * The GECOS (real name) of the client.
	 */
	real = "Bot Services";

	/* (*)min_users
	 * Minimum number of users a channel must have before a Bot is allowed
	 * to be assigned to that channel.
	 */
	min_users = 0;
};

/* GroupServ configuration.
 *
 * The groupserv {} block contains settings specific to the GroupServ modules.
 *
 * GroupServ provides features for managing a collection of channels at once.
 *
 */
groupserv {
	/* (*)nick
	 * The nickname we want GroupServ to have.
	 */
	nick = "GroupServ";

	/* (*)user
	 * The username we want GroupServ to have.
	 */
	user = "GroupServ";

	/* (*)host
	 * The hostname we want GroupServ to have.
	 */
	host = "services.int";

	/* (*)real
	 * The realname (gecos) information we want GroupServ to have.
	 */
	real = "Group Management Services";

	/* (*)aliases
	 * Command aliases for GroupServ.
	 */
	aliases {
	};

	/* (*)access
	 * Command access changes for GroupServ.
	 */
	access {
	};

	/* (*)maxgroups
	 * Maximum number of groups one username can be founder of.
	 */
	maxgroups = 5;

	/* (*)maxgroupacs
	 * Maximum number of access entries you may have in a group.
	 */
	maxgroupacs = 100;

	/* (*)enable_open_groups
	 * Setting this option will allow any group founder to mark
	 * their group as "anyone can join".
	 */
	enable_open_groups;

	/* (*)join_flags
	 * This is the GroupServ flagset that users who JOIN a open
	 * group will get upon join. Please check the groupserv/flags
	 * helpfile before changing this option. Valid flagsets (for
	 * example) would be: "+v" or "+cv". It is not valid to use
	 * minus flags (such as "-v") here.
	 */
	join_flags = "+";
};

/* HostServ configuration.
 *
 * The hostserv {} block contains settings specific to the HostServ modules.
 *
 * HostServ provides advanced virtual host management.
 */
hostserv {
	/* (*)nick
	 * The nickname we want HostServ to have.
	 */
	nick = "HostServ";

	/* (*)user
	 * Sets the username used for this client.
	 */
	user = "HostServ";

	/* (*)host
	 * The hostname used for this client.
	 */
	host = "services.int";

	/* (*)real
	 * The GECOS (real name) of the client.
	 */
	real = "Host Management Services";

	/* (*)request_per_nick
	 * Whether the request system should work per nick or per account.
	 * The recommended setting is to leave this disabled, so that
	 * vhosts work as consistently as possible.
	 */
	#request_per_nick;

	/* (*)aliases
	 * Command aliases for HostServ.
	 */
	aliases {
		"APPROVE" = "ACTIVATE";
		"DENY" = "REJECT";
	};

	/* (*)access
	 * Command access changes for HostServ.
	 */
	access {
	};
};

/* HelpServ configuration
 *
 * The helpserv {} block contains settings specific to the HelpServ modules.
 *
 * HelpServ adds a few different ways for users to request help from network staff.
 */
helpserv {
	/* (*)nick
	 * The nickname we want HelpServ to have.
	 */
	nick = "HelpServ";

	/* (*)user
	 * The username we want HelpServ to have.
	 */
	user = "HelpServ";

	/* (*)host
	 * The hostname we want HelpServ to have.
	 */
	host = "services.int";

	/* (*)real
	 * The realname (gecos) information we want HelpServ to have.
	 */
	real = "Help Services";
};

/* StatServ configuration
 *
 * The statserv {} block contains settings specific to the StatServ modules.
 *
 * StatServ adds basic stats and split tracking.
 */
statserv {
	/* (*)nick
	 * The nickname we want StatServ to have.
	 */
	nick = "StatServ";

	/* (*)user
	 * The username we want StatServ to have.
	 */
	user = "StatServ";

	/* (*)host
	 * The hostname we want StatServ to have.
	 */
	host = "services.int";

	/* (*)real
	 * The realname (gecos) information we want StatServ to have.
	 */
	real = "Statistics Services";
};

/* ALIS configuration.
 *
 * The alis {} block contains settings specific to the ALIS modules.
 */
alis {
	/* (*)nick
	 * The nickname we want ALIS to have.
	 */
	nick = "ALIS";

	/* (*)user
	 * The username we want ALIS to have.
	 */
	user = "alis";

	/* (*)host
	 * The hostname we want ALIS to have.
	 */
	host = "services.int";

	/* (*)real
	 * The realname (gecos) information we want ALIS to have.
	 */
	real = "Channel Directory";
};

/* HTTP server configuration.
 *
 * The httpd {} block contains settings specific to the HTTP server module.
 *
 * The HTTP server in Services is used for serving XMLRPC requests. It can
 * also serve static documents and statistics pages.
 */
httpd {
	/* host
	 * The host that the HTTP server will listen on.
	 * Use 0.0.0.0 if you want to listen on all available hosts.
	 */
	host = "0.0.0.0";

	/* host (ipv6)
	 * If you want, you can have Atheme listen on an IPv6 host too.
	 * Use :: if you want to listen on all available IPv6 hosts.
	 */
	#host = "::";

	/* www_root
	 * The directory that contains the files that should be served by the httpd.
	 */
	www_root = "/var/www";

	/* port
	 * The port that the HTTP server will listen on.
	 */
	port = 8080;
};

/* LDAP configuration.
 *
 * The ldap {} block contains settings specific to the LDAP authentication
 * module.
 */
ldap {
	/* (*)url
	 * LDAP URL of the server to use.
	 */
	url = "ldap://127.0.0.1";

	/* (*)dnformat
	 * Format string to convert an account name to an LDAP DN.
	 * Must contain exactly one %s which will be replaced by the account
	 * name.
	 * Services will attempt a simple bind with this DN and the given
	 * password; if this is successful the password is considered correct.
	 */
	dnformat = "cn=%s,dc=jillestest,dc=com";
};

/******************************************************************************
 * LOGGING SECTION.                                                           *
 ******************************************************************************/

/*
 * logfile{} blocks can be used to set up log files other than the master
 * logfile used by services, which is controlled by serverinfo::loglevel.
 *
 * The various logging categories are:
 *      debug, all      - meta-keyword for all possible categories
 *      trace           - meta-keyword for a little bit of info
 *      misc            - like trace, but with some more miscillaneous info
 *      notice          - meta-keyword for notice-like information
 * ------------------------------------------------------------------------------
 *      error           - critical errors
 *      info            - miscillaneous log notices
 *      verbose         - A bit more verbose than info, not quite as spammy as debug
 *      commands        - all command use
 *      admin           - administrative command use
 *      register        - account and channel registrations
 *      set             - changes of account or channel settings
 *      request         - user requests (currently only vhosts)
 *      network         - log notices related to network status
 *      rawdata         - log raw data sent and received by services
 *      wallops         - <not yet used>
 *      denycmd         - security model denials (commands, permissions)
 */

/*
 * This block logs all account and channel registrations and drops,
 * and account and channel setting changes to var/account.log.
 */
logfile "var/account.log" { register; set; };

/*
 * This block logs all command use to var/commands.log.
 */
logfile "var/commands.log" { commands; };

/*
 * This block logs all security auditing information.
 */
logfile "var/audit.log" { denycmd; };

/*
 * You can log to IRC channels, and even split it by category, too.
 * This entry provides roughly the same functionality as the old snoop
 * feature.
 */
logfile "#services" { error; info; admin; request; register; denycmd; };

/*
 * This block logs to server notices.
 */
logfile "!snotices" { error; info; request; denycmd; };

/******************************************************************************
 * GENERAL PARAMETERS CONFIGURATION SECTION.                                  *
 ******************************************************************************/

/* The general {} block defines general configuration options. */
general {
	/* (*)permissive_mode
	 * Whether or not security denials should be soft denials instead of
	 * hard denials.  If security denials are soft denials, then they will
	 * only be logged to the denial log.
	 */
	#permissive_mode;

	/* (*)helpchan
	 * Network help channel. Shown to users when they request
	 * help for a command that doesn't exist.
	 */
	#helpchan = "#help";

	/* (*)helpurl
	 * Network webpage for services help. Shown to users when they
	 * request help for a command that doesn't exist.
	 */
	#helpurl = "http://www.stack.nl/~jilles/irc/atheme-help/";

	/* (*)silent
	 * If you want to prevent services from sending
	 * WALLOPS/GLOBOPS about things uncomment this.
	 * Not recommended.
	 */
	#silent;

	/* (*)verbose_wallops
	 * If you want services to send you more information about
	 * events that are occuring (in particular AKILLs), uncomment the
	 * directive below.
	 *
	 * WARNING! This may result in large amounts of wallops/globops
	 * floods.
	 */
	#verbose_wallops;

	/* (*)join_chans
	 * Should ChanServ be allowed to join registered channels?
	 * This option is useful for the fantasy command set.
	 *
	 * If enabled, you can tell ChanServ to join via SET GUARD ON.
	 *
	 * If you use ircu-like ircd (asuka, bircd, undernet), you must
	 * leave this enabled, and put guard in default cflags.
	 *
	 * For ratbox it is recommended to leave it on and put guard in
	 * default cflags, in order that ChanServ does not have to join/part
	 * to do certain things. On the other hand, enabling this increases
	 * potential for bots fighting with ChanServ.
	 *
	 * Regardless of this option, ChanServ will temporarily join
	 * channels which would otherwise be empty if necessary to enforce
	 * akick/restricted/close, and to change the TS if changets is
	 * enabled.
	 */
	join_chans;

	/* (*)leave_chans
	 * Do we leave registered channels after everyone else has left?
	 * Turning this off serves little purpose, except to mark "official"
	 * network channels by keeping them open, and to preserve the
	 * topic and +beI lists.
	 */
	leave_chans;

	/* secure
	 * Do you want to require the use of /msg <service>@<services host>?
	 * Turning this on helps protect against spoofers, but is disabled
	 * as most networks do not presently use it.
	 */
	#secure;

	/* (*)uflags
	 * The default flags to set for usernames upon registration.
	 * Valid values are: hold, neverop, noop, hidemail, nomemo, emailmemos,
	 * enforce, privmsg, private, quietchg and none.
	 */
	uflags = { hidemail; };

	/* (*)cflags
	 * The default flags to set for channels upon registration.
	 * Valid values are: hold, secure, verbose, verbose_ops, keeptopic,
	 * topiclock, guard, private, nosync, limitflags and none.
	 */
	cflags = { verbose; guard; };

	/* (*)raw
	 * Do you want to allow SRAs to use the RAW and INJECT commands?
	 * These commands are for debugging. If you don't know how to use them
	 * then don't enable them. They are not supported.
	 */
	#raw;

	/* (*)flood_msgs
	 * Do you want services to detect floods?
	 * Set to how many messages before a flood is triggered.
	 * Note that some messages that need a lot of processing count
	 * as two or four messages.
	 * If services receives `flood_msgs' within `flood_time' the user will
	 * trigger the flood protection.
	 * Setting this to zero disables flood protection.
	 */
	flood_msgs = 7;

	/* (*)flood_time
	 * Do you want services to detect floods?
	 * Set to how long before the counter resets.
	 * If services receives `flood_msgs' within `flood_time' the user will
	 * trigger the flood protection.
	 */
	flood_time = 10;

	/* (*)ratelimit_uses
	 * After how many uses of a command will users be throttled.
	 * After `ratelimit_uses' of a command within `ratelimit_period', users
	 * will not be able to run that ratelimited command until the period is up.
	 * Comment this, ratelimit_period below or both options out to disable rate limiting.
	 * Currently used in helpserv/helpme, helpserv/ticket, hostserv/request,
	 * nickserv/register and chanserv/register.
	 */
	ratelimit_uses = 5;

	/* (*)ratelimit_period
	 * After how much time (in seconds) will the ratelimit_uses counter reset.
	 * After `ratelimit_uses' of a command within `ratelimit_period', users
	 * will not be able to run that ratelimited command until the period is up.
	 * Comment this, ratelimit_uses above or both options out to disable rate limiting.
	 * Currently used in helpserv/helpme, helpserv/ticket, hostserv/request,
	 * nickserv/register and chanserv/register.
	 */
	ratelimit_period = 60;

	/* (*)kline_time
	 * The default expire time for KLINE's in days.
	 * Setting this to 0 makes all KLINE's permanent.
	 */
	kline_time = 7;

	/* (*)kline_with_ident
	 * KLINE user@host instead of *@host.
	 * Applies to all automatic KLINE's set by services.
	 */
	#kline_with_ident;

	/* (*)kline_verified_ident
	 * KLINE *@host if the first character of the ident is ~,
	 * irrespective of the value of kline_with_ident.
	 * /
	#kline_verified_ident

	/* (*)clone_time
	 * This is the default expiry time for CLONE exemptions in minutes.
	 * Setting this to 0 makes all CLONE exemptions permanent.
	 */
	clone_time = 0;

	/* commit_interval
	 * The time between database writes in minutes.
	 */
	commit_interval = 5;

	/* (*)default_clone_allowed
	 * The limit after which clones will be KILLed or TKLINEd.
	 * Used by operserv/clones.
	 */
	default_clone_allowed = 5;

	/* (*)default_clone_warn
	 * The limit after which clones will be warned that they may not
	 * have any more concurrent connections. Should be lower than
	 * default_clone_allowed . Used by operserv/clones.
	 */
	default_clone_warn = 4;

	/* (*)clone_identified_increase_limit
	 * If this option is enabled, the clone limit for a IP/host will
	 * be increased by 1 per clone that's identified to services.
	 * This has a limit of double the clone limits above.
	 */
	clone_identified_increase_limit;

	/* (*)uplink_sendq_limit
	 * The maximum amount of data that may be queued to be sent
	 * to the uplink, in bytes. This should be enough to contain
	 * Atheme's response to the netburst, but smaller than the
	 * IRCd's sendq limit for servers.
	 */
	uplink_sendq_limit = 1048576;

	/* (*)language
	 * Language to use for channel and oper messages and as default
	 * for users.
	 */
	language = "en";

	/* exempts
	 * This block contains a list of user@host masks. Users matching any
	 * of these will not be automatically K:lined by services.
	 */
	exempts {
	};

	/* allow_taint
	 * By enabling this option, Atheme will run in configurations where
	 * the upstream will not provide support.  By enabling this feature,
	 * you void any perceived rights to support.
	 */
	#allow_taint;

	/* (*)immune_level
	 * This option allows you to customize the operlevel which gets kick
	 * immunity privileges.
	 *
	 * The following flags are available:
	 *    immune - require whatever ircd usermode is needed for kick
	 *             immunity (this is the default);
	 *    admin  - require admin privileges for kick immunity
	 *    ircop  - require any ircop privileges for kick immunity (umode +o)
	 */
	immune_level = immune;
};

/******************************************************************************
 * OPERATOR AND PRIVILEGES CONFIGURATION SECTION.                             *
 ******************************************************************************/

/* Operator configuration
 * See the PRIVILEGES document for more information.
 * NOTE: All changes apply immediately upon rehash. You may need
 * to send a signal (killall -HUP atheme-services) to regain control.
 */
/* (*) Operclasses specify groups of services operator privileges */
/* The "user" operclass specifies privileges all users get.
 * This may be empty (default) in which case users get no special privileges.
 * If you use the security/cmdperm module, you will need to grant command: privileges
 * to every command that you want users to be able to use.
 */
operclass "user" { };

/* The "ircop" operclass specifies privileges all IRCops get.
 * This may be empty in which case IRCops get no privs.
 * At least chan:cmodes, chan:joinstaffonly and general:auspex are suggested.
 */
operclass "ircop" {
	privs {
		special:ircop;
	};

	privs {
		user:auspex;
		user:admin;
		user:sendpass;
		user:vhost;
		user:mark;
	};

	privs {
		chan:auspex;
		chan:admin;
		chan:cmodes;
		chan:joinstaffonly;
	};

	privs {
		general:auspex;
		general:helper;
		general:viewprivs;
		general:flood;
	};

	privs {
		operserv:omode;
		operserv:akill;
		operserv:jupe;
		operserv:global;
	};

	privs {
		group:auspex;
		group:admin;
	};
};

operclass "sra" {
	/* You can inherit privileges from a lower operclass. */
	extends "ircop";

	privs {
		user:hold;
		user:regnolimit;
	};

	privs {
		general:metadata;
		general:admin;
	};

	privs {
		#operserv:massakill;
		#operserv:akill-anymask;
		operserv:noop;
		operserv:grant;
		#operserv:override;
	};

	/* needoper
	 * Only grant privileges to IRC users in this oper class if they
	 * are opered; other use of privilege (channel succession, XMLRPC,
	 * etc.) is unaffected by this.
	 */
	needoper;
};


/* (*) Operator blocks specify accounts with certain privileges
 * Oper classes must be defined before they are used in operator blocks.
 */
operator "jilles" {
	/* operclass */
	operclass = "sra";
	/* password
	 * Normally, the user needs to identify/log in using the account's
	 * password, and may need to be an IRCop (see operclass::needoper
	 * above). If you consider this not secure enough, you can
	 * specify an additional password here, which the user must enter
	 * using the OperServ IDENTIFY command, before the privileges can
	 * be used.
	 * The password must be encrypted if a crypto module is in use.
	 */
	#password = "$1$3gJMO9by$0G60YE6GqmuHVH3AnFPor1";
};

/******************************************************************************
 * INCLUDE CONFIGURATION SECTION.                                             *
 ******************************************************************************/

/* You may also specify other files for inclusion.
 * For example:
 *
 * include "etc/sras.conf";
 */
